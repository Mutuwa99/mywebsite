name: Deploy to EC2

on:
  push:
    branches:
      - master

jobs:
  manual_approval:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Manual approval
        id: approval
        run: |
          echo "Approve the deployment (Comment with 'approve' or 'reject')"
          echo "::set-output name=approval_status::pending"

  send_approval_notification:
    needs: manual_approval
    runs-on: ubuntu-latest
    if: needs.manual_approval.outputs.approval_status == 'pending'
    steps:
      - name: Send approval notification
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const approvalComment = "Please approve or reject the deployment by commenting on this pull request with 'approve' or 'reject'.";
            const context = github.context;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const pullRequestNumber = context.payload.pull_request.number;
            const issueCommentsEndpoint = `GET /repos/${owner}/${repo}/issues/${pullRequestNumber}/comments`;
            const createCommentEndpoint = `POST /repos/${owner}/${repo}/issues/${pullRequestNumber}/comments`;
            const { data: comments } = await github.request(issueCommentsEndpoint);
            const existingComment = comments.find(comment => comment.user.login === "github-actions[bot]" && comment.body.includes(approvalComment));
            if (existingComment) {
              console.log("Approval comment already exists.");
            } else {
              await github.request(createCommentEndpoint, {
                body: approvalComment
              });
              console.log("Approval comment created.");
            }      
          


  deploy:
    needs: send_approval_notification
    if: needs.send_approval_notification.outputs.status == 'success'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.0
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}

      - name: Copy files to EC2
        run: scp -r -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "${{ github.workspace }}" ec2-user@50.17.57.13:~/website/

      - name: SSH into EC2
        run: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ec2-user@50.17.57.13 "sudo cp -r ~/website/mywebsite/* /var/www/html"
